version: '4.1.0-{build}'

#environment:
#  APPVEYOR_SAVE_CACHE_ON_ERROR: false
#  VCPKG_BUILD_TYPE: Release

init:
- ps: |
    Write-Host "APPVEYOR_BUILD_VERSION = "$env:APPVEYOR_BUILD_VERSION
    if ($isWindows) {
        $version = $env:APPVEYOR_BUILD_VERSION.Split('-')[0]
        Write-Host "version = "$version
        $date = Get-Date -Format "yyyyMMdd"
        Update-AppveyorBuild -Version "$version.$date-beta-$env:APPVEYOR_BUILD_NUMBER"
        Write-Host "APPVEYOR_BUILD_VERSION = "$env:APPVEYOR_BUILD_VERSION
    }
    iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    Write-Host "APPVEYOR = "$env:APPVEYOR
    Write-Host "CI = "$env:CI
    Write-Host "APPVEYOR_API_URL = "$env:APPVEYOR_API_URL
    Write-Host "APPVEYOR_ACCOUNT_NAME = "$env:APPVEYOR_ACCOUNT_NAME
    Write-Host "APPVEYOR_PROJECT_ID = "$env:APPVEYOR_PROJECT_ID
    Write-Host "APPVEYOR_PROJECT_NAME = "$env:APPVEYOR_PROJECT_NAME
    Write-Host "APPVEYOR_PROJECT_SLUG = "$env:APPVEYOR_PROJECT_SLUG
    Write-Host "APPVEYOR_BUILD_FOLDER = "$env:APPVEYOR_BUILD_FOLDER
    Write-Host "APPVEYOR_BUILD_ID = "$env:APPVEYOR_BUILD_ID
    Write-Host "APPVEYOR_BUILD_NUMBER = "$env:APPVEYOR_BUILD_NUMBER
    Write-Host "APPVEYOR_BUILD_VERSION = "$env:APPVEYOR_BUILD_VERSION
    Write-Host "APPVEYOR_BUILD_WORKER_IMAGE = "$env:APPVEYOR_BUILD_WORKER_IMAGE
    Write-Host "APPVEYOR_PULL_REQUEST_NUMBER = "$env:APPVEYOR_PULL_REQUEST_NUMBER
    Write-Host "APPVEYOR_PULL_REQUEST_TITLE = "$env:APPVEYOR_PULL_REQUEST_TITLE
    Write-Host "APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME = "$env:APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME
    Write-Host "APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH = "$env:APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH
    Write-Host "APPVEYOR_PULL_REQUEST_HEAD_COMMIT = "$env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT
    Write-Host "APPVEYOR_JOB_ID = "$env:APPVEYOR_JOB_ID
    Write-Host "APPVEYOR_JOB_NAME = "$env:APPVEYOR_JOB_NAME
    Write-Host "APPVEYOR_JOB_NUMBER = "$env:APPVEYOR_JOB_NUMBER
    Write-Host "APPVEYOR_REPO_PROVIDER = "$env:APPVEYOR_REPO_PROVIDER
    Write-Host "APPVEYOR_REPO_SCM = "$env:APPVEYOR_REPO_SCM
    Write-Host "APPVEYOR_REPO_NAME = "$env:APPVEYOR_REPO_NAME
    Write-Host "APPVEYOR_REPO_BRANCH = "$env:APPVEYOR_REPO_BRANCH
    Write-Host "APPVEYOR_REPO_TAG = "$env:APPVEYOR_REPO_TAG
    Write-Host "APPVEYOR_REPO_TAG_NAME = "$env:APPVEYOR_REPO_TAG_NAME
    Write-Host "APPVEYOR_REPO_COMMIT = "$env:APPVEYOR_REPO_COMMIT
    Write-Host "APPVEYOR_REPO_COMMIT_AUTHOR = "$env:APPVEYOR_REPO_COMMIT_AUTHOR
    Write-Host "APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL = "$env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL
    Write-Host "APPVEYOR_REPO_COMMIT_TIMESTAMP = "$env:APPVEYOR_REPO_COMMIT_TIMESTAMP
    Write-Host "APPVEYOR_REPO_COMMIT_MESSAGE = "$env:APPVEYOR_REPO_COMMIT_MESSAGE
    Write-Host "APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED = "$env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED
    Write-Host "APPVEYOR_SCHEDULED_BUILD = "$env:APPVEYOR_SCHEDULED_BUILD
    Write-Host "PLATFORM = "$env:PLATFORM
    Write-Host "CONFIGURATION = "$env:CONFIGURATION
    Write-Host "APPVEYOR_SAVE_CACHE_ON_ERROR = "$env:APPVEYOR_SAVE_CACHE_ON_ERROR

#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

image: 
  - Ubuntu1804
  - Visual Studio 2017

configuration: Release

#platform: 
#  - x64
#  - x86

#matrix:
  #fast_finish: true
  #exclude:
  #  - image: Ubuntu1804
  #    platform: x86

cache: 
  #- c:\tools\vcpkg\installed\
  #- c:\tools\vcpkg\installed\ -> appveyor.yml
  - packages -> **\packages.config

install:
# update vcpkg
#- cd C:\Tools\vcpkg
#- git pull
#- .\bootstrap-vcpkg.bat
#- cd %APPVEYOR_BUILD_FOLDER%
#  - cmd: cd c:\tools\vcpkg
  - cmd: vcpkg list
  - cmd: vcpkg integrate remove
#  - cmd: SET VCPKG_BUILD_TYPE=release
#  - cmd: vcpkg integrate install
#  - cmd: if %PLATFORM% == x64 vcpkg install tesseract:x64-windows-static
#  - cmd: if %PLATFORM% == x86 vcpkg install tesseract:x86-windows-static
#  - cmd: cd %APPVEYOR_BUILD_FOLDER%
#  - cmd: vcpkg list

  - sh: pwd
  - sh: sudo apt update
  - sh: sudo apt -y remove x264 libx264-dev
  - sh: sudo apt -y install build-essential checkinstall cmake pkg-config yasm
  - sh: sudo apt -y install git gfortran
  - sh: sudo apt -y install libjpeg8-dev libpng-dev 
  - sh: sudo apt -y install software-properties-common
  - sh: sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"
  - sh: sudo apt -y update 
  - sh: sudo apt -y install libjasper1
  - sh: sudo apt -y install libtiff-dev 
  - sh: sudo apt -y install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev
  - sh: sudo apt -y install libxine2-dev libv4l-dev
  - sh: cd /usr/include/linux
  - sh: sudo ln -s -f ../libv4l1-videodev.h videodev.h
  - sh: cd $APPVEYOR_BUILD_FOLDER
  - sh: sudo apt -y install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
  - sh: sudo apt -y install libgtk2.0-dev libtbb-dev qt5-default
  - sh: sudo apt -y install libatlas-base-dev
  - sh: sudo apt -y install libfaac-dev libmp3lame-dev libtheora-dev
  - sh: sudo apt -y install libvorbis-dev libxvidcore-dev
  - sh: sudo apt -y install libopencore-amrnb-dev libopencore-amrwb-dev
  - sh: sudo apt -y install libavresample-dev
  - sh: sudo apt -y install x264 v4l-utils
  - sh: sudo apt -y install libwebp-dev
  - sh: sudo apt -y install tesseract-ocr libtesseract-dev libleptonica-dev
  - sh: pwd; ls; 
  - sh: wget https://github.com/opencv/opencv/archive/4.1.0.zip -Oopencv-4.1.0.zip
  - sh: wget https://github.com/opencv/opencv_contrib/archive/4.1.0.zip -Oopencv_contrib-4.1.0.zip
  - sh: unzip opencv-4.1.0.zip
  - sh: unzip opencv_contrib-4.1.0.zip
  - sh: cd opencv-4.1.0 && mkdir build && cd build
  - sh: cmake -DCMAKE_BUILD_TYPE=Release -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.0/modules -DENABLE_CXX11=ON -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python=OFF -DCMAKE_INSTALL_PREFIX=${APPVEYOR_BUILD_FOLDER}/opencv_ubuntu ..
  - sh: make -j2
  - sh: sudo make install
  - sh: sudo ldconfig
  - sh: cd ${APPVEYOR_BUILD_FOLDER}
  - sh: pwd
  - sh: ls
  - sh: ls opencv_ubuntu

before_build:
  - cmd: git submodule update --init --recursive
  - cmd: nuget restore
  #- dotnet restore

build_script:
  - cmd: msbuild OpenCvSharp.sln /t:build /p:configuration=%CONFIGURATION% /p:platform=x64 -maxcpucount
  - cmd: msbuild OpenCvSharp.sln /t:build /p:configuration=%CONFIGURATION% /p:platform=x86 -maxcpucount
  - sh: mkdir src/build && cd $_
  - sh: cmake -D CMAKE_PREFIX_PATH=${APPVEYOR_BUILD_FOLDER}/opencv_ubuntu ..
  - sh: make -j2
  - sh: pwd
  - sh: ls 
  - sh: ls OpenCvSharpExtern
  - sh: cp OpenCvSharpExtern/libOpenCvSharpExtern.so ${APPVEYOR_BUILD_FOLDER}/nuget/

after_build:
- ps: |
    (Get-ChildItem $env:APPVEYOR_BUILD_FOLDER -Recurse).Where{ $_.Extension -eq ".nuspec" }.ForEach{
        [xml]$xml = Get-Content $_.FullName
        $xml.package.metadata.version = $env:APPVEYOR_BUILD_VERSION
        $xml.Save($_.FullName)
    }
    if ($isWindows) {
        nuget pack nuget/OpenCvSharp4.nuspec -OutputDirectory artifacts
        nuget pack nuget/OpenCvSharp4.Windows.nuspec -OutputDirectory artifacts
        nuget pack nuget/OpenCvSharp4.runtime.win.nuspec -OutputDirectory artifacts
    } else {
        nuget pack $env:APPVEYOR_BUILD_FOLDER/nuget/OpenCvSharp4.runtime.ubuntu.18.04-x64.nuspec -OutputDirectory $env:APPVEYOR_BUILD_FOLDER/artifacts_ubuntu
    }

test_script:
- cmd: cd %APPVEYOR_BUILD_FOLDER%
- cmd: cd test
- cmd: cd OpenCvSharp.Tests
- cmd: dotnet test -c Release -f net461 #--no-build
- cmd: dotnet test -c Release -f netcoreapp2.0 #--no-build
- cmd: cd %APPVEYOR_BUILD_FOLDER%

artifacts:
  - path: artifacts\**\*.*
  - path: artifacts_ubuntu/**/*.*
  #- path: src/build/OpenCvSharpExtern
  #- path: src\Release\x64\OpenCvSharpExtern.dll
  #- path: src\Release\Win32\OpenCvSharpExtern.dll

deploy:
- provider: NuGet # appveyor
  server: https://ci.appveyor.com/nuget/shimat
  api_key:
    secure: PW0F7tbGr+QLuLPUGy+32pNtMZUJeqjyikz9nKlpALA=
  skip_symbols: true
  artifact: /.*\.nupkg/

#- provider: NuGet # nuget.org
#  api_key:
#    secure: qea/3lnas374qyS4Xw9t5Z5jBKsVsBPGsY938QHgJ2IQyrQmug0qPKDU7tll/QkJ
#  skip_symbols: true
#  artifact: /.*\.nupkg/
