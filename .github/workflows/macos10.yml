name: macOS 10.15

on:
  pull_request:
    types: [synchronize, opened]
  push:
    branches:
      - master

env:
  DEBIAN_FRONTEND: noninteractive
  OPENCV_VERSION: 4.7.0

jobs:
  build:

    runs-on: macos-11
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Install build dependencies
        run: | 
          brew install wget pkg-config mono-libgdiplus gtk+ ffmpeg@4 glog yasm harfbuzz jpeg libpng libtiff openjpeg metis openblas opencore-amr protobuf tbb webp # openexr

#      - name: Cache OpenCV
#        id: opencv-cache
#        uses: actions/cache@v3
#        with:
#          path: ${{ github.workspace }}/opencv_macos/
#          key: opencv-${{ env.OPENCV_VERSION }}-macos-rev1

      - name: Build OpenCV
        if: steps.opencv-cache.outputs.cache-hit != 'true'
        run: |
          pwd
          wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -Oopencv-${OPENCV_VERSION}.zip && unzip opencv-${OPENCV_VERSION}.zip
          wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip -Oopencv_contrib-${OPENCV_VERSION}.zip && unzip opencv_contrib-${OPENCV_VERSION}.zip
          cd opencv-${OPENCV_VERSION} && mkdir build && cd build
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules \
            -DBUILD_SHARED_LIBS=OFF \
            -DENABLE_CXX11=ON -DBUILD_TESTS=OFF \
            -DBUILD_PERF_TESTS=OFF \
            -DBUILD_DOCS=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_JAVA=OFF \
            -DBUILD_opencv_java_bindings_generator=OFF \
            -DBUILD_opencv_python_bindings_generator=OFF \
            -DBUILD_opencv_python_tests=OFF \
            -DBUILD_opencv_ts=OFF \
            -DBUILD_opencv_js=OFF \
            -DBUILD_opencv_js_bindings_generator=OFF \
            -DBUILD_opencv_apps=OFF \
            -DBUILD_opencv_barcode=OFF \
            -DBUILD_opencv_bioinspired=OFF \
            -DBUILD_opencv_ccalib=OFF \
            -DBUILD_opencv_datasets=OFF \
            -DBUILD_opencv_dnn_objdetect=OFF \
            -DBUILD_opencv_dpm=OFF \
            -DBUILD_opencv_fuzzy=OFF \
            -DBUILD_opencv_gapi=ON \
            -DBUILD_opencv_intensity_transform=OFF \
            -DBUILD_opencv_mcc=OFF \
            -DBUILD_opencv_objc_bindings_generator=OFF \
            -DBUILD_opencv_rapid=OFF \
            -DBUILD_opencv_reg=OFF \
            -DBUILD_opencv_stereo=OFF \
            -DBUILD_opencv_structured_light=OFF \
            -DBUILD_opencv_surface_matching=OFF \
            -DBUILD_opencv_wechat_qrcode=ON \
            -DBUILD_opencv_videostab=OFF \
            -DWITH_GSTREAMER=OFF \
            -DWITH_EIGEN=OFF \
            -DWITH_ADE=OFF \
            -DWITH_OPENEXR=OFF \
            -DOPENCV_ENABLE_NONFREE=ON \
            -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/opencv_macos ..
          make -j2
          make install
          cd ${GITHUB_WORKSPACE}
          ls
       
      - name: Build OpenCvSharpExtern
        run: |
          pwd
          mkdir src/build && cd $_
          cmake -DCMAKE_BUILD_TYPE=Release -D CMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/opencv_macos ..
          make -j2
          ls 
          ls OpenCvSharpExtern
          cp OpenCvSharpExtern/libOpenCvSharpExtern.dylib ${GITHUB_WORKSPACE}/nuget/

      - name: Check OpenCvSharpExtern
        run: |
          cd ${GITHUB_WORKSPACE}/nuget/
          otool -L libOpenCvSharpExtern.dylib
          nm libOpenCvSharpExtern.dylib
          echo -ne "#include <stdio.h> \n int core_Mat_sizeof(); int main(){ int i = core_Mat_sizeof(); printf(\"sizeof(Mat) = %d\", i); return 0; }" > test.c
          gcc -I./ -L./ test.c -o test -lOpenCvSharpExtern
          LD_LIBRARY_PATH=. ./test

      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Create NuGet package
        env: 
          BETA: ""
        run: |
          yyyymmdd=`date '+%Y%m%d'`
          echo $yyyymmdd
          sed -E -i=.bak "s/<version>[0-9]\.[0-9]{1,2}\.[0-9]{1,2}.[0-9]{8}(-beta[0-9]*)?<\/version>/<version>${OPENCV_VERSION}.${yyyymmdd}${BETA}<\/version>/" ${GITHUB_WORKSPACE}/nuget/OpenCvSharp4.runtime.osx.10.15-x64.nuspec
          cat ${GITHUB_WORKSPACE}/nuget/OpenCvSharp4.runtime.osx.10.15-x64.nuspec
          dotnet pack ${GITHUB_WORKSPACE}/nuget/OpenCvSharp4.runtime.osx.10.15-x64.csproj -o ${GITHUB_WORKSPACE}/artifacts_macos
          ls ${GITHUB_WORKSPACE}/artifacts_macos       
       
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts_macos_10
          path: artifacts_macos

      - name: Test
        run: |
          cd ${GITHUB_WORKSPACE}/test/OpenCvSharp.Tests
          # ls
          dotnet build -c Release -f net6.0
          cp ${GITHUB_WORKSPACE}/nuget/libOpenCvSharpExtern.dylib ${GITHUB_WORKSPACE}/test/OpenCvSharp.Tests/bin/Release/net6.0/
          cp ${GITHUB_WORKSPACE}/nuget/libOpenCvSharpExtern.dylib ${GITHUB_WORKSPACE}/test/OpenCvSharp.Tests/
          # ls ${GITHUB_WORKSPACE}/test/OpenCvSharp.Tests/bin/Release/net6.0/
          # ls
          sudo cp ${GITHUB_WORKSPACE}/nuget/libOpenCvSharpExtern.dylib /usr/local/lib/
          LD_LIBRARY_PATH=. 
          dotnet test OpenCvSharp.Tests.csproj -c Release -f net6.0 --runtime osx-x64 --logger "trx;LogFileName=test-results.trx" < /dev/null
          ls
          ls TestResults

      - uses: actions/upload-artifact@v1
        with:
          name: artifacts_macos_10_test_results
          path: test/OpenCvSharp.Tests/TestResults/test-results.trx
